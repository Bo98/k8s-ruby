#!/usr/bin/env ruby

require 'optparse'
require 'uri'
require 'pharos-kube-client'

Options = Struct.new(
  :config,
  :server,
  :insecure_skip_tls_verify,
  :namespace,
  :all_namespaces,
  :pipeline_list,
  :label_selector,
)

options = Options.new()
logger = Logger.new(STDERR)

parser = OptionParser.new do |parser|
  parser.on('--kubeconfig=PATH') do |path|
    options.config = Pharos::Kube::Config.load_file(path)
  end
  parser.on('--server=SERVER') do |server|
    options.server = URI(server)
  end
  parser.on('--insecure-skip-tls-verify') do
    options.insecure_skip_tls_verify = true
  end
  parser.on('-n', '--namespace=NAMESPACE') do |namespace|
    options.namespace = namespace
  end
  parser.on('--all-namespaces') do
    options.all_namespaces = true
  end
  parser.on('-l', '--label-selector=LABEL=VALUE') do |selector|
    options.label_selector = selector
  end
  parser.on('--pipeline-list') do
    options.pipeline_list = true
  end
end

parser.parse!

if options.config
  client = Pharos::Kube::Client.config(options.config)
else
  client = Pharos::Kube.client(options.server.to_s,
    ssl_verify_peer: !options.insecure_skip_tls_verify,
  )
end

logger.info "Kube server version: #{client.version[:gitVersion]}"

if options.all_namespaces
  namespace = nil # all
elsif options.namespace
  namespace = options.namespace
elsif options.config && ns = options.config.context.namespace
  namespace = ns
else
  namespace = nil # all
end

([client.api] + client.apis(prefetch_resources: true)).each do |api|
  logger.info "api=#{api.api_version}"

  resources = api.resources.select{|resource| resource.list? }

  if options.pipeline_list
    objects = api.list_resources(resources, namespace: namespace, labelSelector: options.label_selector)
    objects.each do |object|
      # TODO: map resource name
      logger.info "api=#{object[:apiVersion]} kind=#{object[:kind]} namespace=#{object[:metadata][:namespace]} name=#{object[:metadata][:name]}"
    end
  else
    resources.each do |resource|
      logger.info "api=#{api.api_version} resource=#{resource.name}"

      objects = resource.list(labelSelector: options.label_selector)
      objects.each do |object|
        # TODO: map resource name
        logger.info "api=#{object[:apiVersion]} kind=#{object[:kind]} namespace=#{object[:metadata][:namespace]} name=#{object[:metadata][:name]}"
      end
    end
  end
end

#client.api('v1').resource('pods', namespace: namespace).list.each do |pod|
#  puts "namespace=#{pod[:metadata][:namespace]} pod: #{pod[:metadata][:name]}"
#end
